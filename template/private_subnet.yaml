AWSTemplateFormatVersion: '2010-09-09'
Description: Three Private Subnets with NAT Gateway and Route Table

Parameters:
  PrivatePrimarySubnetCidr:
    Type: String
    Description: CIDR block for the Primary Private Subnet

  PrivateSecondarySubnetCidr:
    Type: String
    Description: CIDR block for the Secondary Private Subnet

  PrivateTertiarySubnetCidr:
    Type: String
    Description: CIDR block for the Tertiary Private Subnet

  CreatePrivateTertiarySubnet:
    Type: String
    AllowedValues: [true, false]
    Default: false
    Description: Whether to create a Tertiary Private Subnet

Conditions:
  CreatePrivateTertiary: !Equals [ !Ref CreatePrivateTertiarySubnet, "true" ]

Resources:

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !ImportValue PrimarySubnetId
      Tags:
        - Key: Name
          Value: NAT-Gateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue VPCId
      Tags:
        - Key: Name
          Value: Private-RouteTable

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivatePrimarySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPCId
      AvailabilityZone: !ImportValue PrimaryAZ
      CidrBlock: !Ref PrivatePrimarySubnetCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Primary

  PrimaryAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivatePrimarySubnet
      RouteTableId: !Ref PrivateRouteTable

  PrivateSecondarySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPCId
      AvailabilityZone: !ImportValue SecondaryAZ
      CidrBlock: !Ref PrivateSecondarySubnetCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Secondary

  SecondaryAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSecondarySubnet
      RouteTableId: !Ref PrivateRouteTable

  PrivateTertiarySubnet:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateTertiary
    Properties:
      VpcId: !ImportValue VPCId
      AvailabilityZone: !ImportValue TertiaryAZ
      CidrBlock: !Ref PrivateTertiarySubnetCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Tertiary

  TertiaryAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateTertiary
    Properties:
      SubnetId: !Ref PrivateTertiarySubnet
      RouteTableId: !Ref PrivateRouteTable

Outputs:
  PrivateSubnetIds:
    Description: List of private subnet IDs
    Value: !If
      - CreatePrivateTertiary
      - !Join [ ",", [ !Ref PrivatePrimarySubnet, !Ref PrivateSecondarySubnet, !Ref PrivateTertiarySubnet ] ]
      - !Join [ ",", [ !Ref PrivatePrimarySubnet, !Ref PrivateSecondarySubnet ] ]
    Export:
      Name: PrivateSubnetIds